<?php

namespace lOro\EntityBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * 
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProveedoresRepository extends EntityRepository
{
    
    public function getProveedorPorNombre($nbProveedor) {
     $conn = $this->getEntityManager()->getConnection();
      
      $query = "SELECT p.id,
                       p.nb_proveedor
                FROM proveedores AS p
                WHERE p.nb_proveedor LIKE '%$nbProveedor%';";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetch();         
    }
    
    public function getProveedoresConCierres() {
      $conn = $this->getEntityManager()->getConnection();
      
      $query = "SELECT DISTINCT(p.id ) AS id_proveedor
                FROM proveedores AS p
                JOIN ventas_cierres AS vc ON (vc.proveedor_id = p.id)
                WHERE p.id = 7;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    
    public function buscarSaldosMensualesCierres($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      $query = "SELECT * 
                FROM v_saldos_bs_mensuales_cierres_proveedores
                WHERE proveedor_id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    public function buscarPagosMensualesPorProveedor($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      
      $query = "SELECT * 
                FROM v_pagos_mensuales_por_proveedor
                WHERE id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }    
    
    
   /* Proveedores - VERDES */   
    public function buscarSaldosMensualesVerdesCierres($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      $query = "SELECT * 
                FROM v_saldos_verdes_mensuales_cierres_proveedores
                WHERE proveedor_id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    public function buscarPagosMensualesVerdesPorProveedor($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      
      $query = "SELECT * 
                FROM v_pagos_mensuales_verdes_por_proveedor 
                WHERE id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }   
    /* Proveedores - VERDES */  
    
    
   /* Proveedores - MORADOS */   
    public function buscarSaldosMensualesMoradosCierres($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      $query = "SELECT * 
                FROM v_saldos_morados_mensuales_cierres_proveedores
                WHERE proveedor_id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }
    
    public function buscarPagosMensualesMoradosPorProveedor($idProveedor) {
      $conn = $this->getEntityManager()->getConnection();
      
      
      $query = "SELECT * 
                FROM v_pagos_mensuales_morados_por_proveedor 
                WHERE id = $idProveedor;";
        
        
        $stmt = $conn->executeQuery($query);
            
            
      return $stmt->fetchAll();        
    }   
    /* Proveedores - MORADOS */    
    
    
    public function findPagosProveedoresPorEmpresa($idProveedor) {
             $conn = $this->getEntityManager()->getConnection();
              
           $stmt = $conn->executeQuery(
                'SELECT *
                 FROM pagos_proveedores_por_empresa AS pago_proveedor
                 WHERE pago_proveedor.id_proveedor = :idProveedor',
                array('idProveedor' => $idProveedor)    
                 );
            
            
            return $stmt->fetchAll();
    }
    
    public function findPagosProveedoresPorFecha($idProveedor,$feDesde,$feHasta) {
             $conn = $this->getEntityManager()->getConnection();
              
           $stmt = $conn->executeQuery(
                'SELECT ep.nombre_empresa,
                        p.nb_proveedor,
                        pp.fe_pago,
                        pp.monto_pagado,
                        tt.nb_transaccion,
                        b.nb_banco,
                        pp.nro_referencia,
                        epc.nombre_empresa AS nombre_empresa_casa
                 FROM pagos_proveedores AS pp
                 JOIN empresas_proveedores AS ep ON (ep.id = pp.empresa_proveedor_id)
                 JOIN proveedores AS p ON (p.id = ep.proveedor_id)
                 JOIN empresas_proveedores AS epc ON (epc.id = pp.empresa_casa_id)
                 JOIN tipo_transaccion AS tt ON (tt.id = pp.tipo_transaccion_id)
                 LEFT JOIN bancos AS b ON (b.id = pp.banco_id)
                 WHERE p.id = :idProveedor 
                 AND pp.fe_pago 
                 BETWEEN :feDesde 
                 AND :feHasta
                 ORDER BY pp.fe_pago DESC',
                   array('idProveedor' => $idProveedor,
                         'feDesde' => $feDesde,
                         'feHasta' => $feHasta));
            
            
            return $stmt->fetchAll();        
    }
    
    public function findEntregasPorFechasProveedor($idProveedor,$feDesde,$feHasta) {
             $conn = $this->getEntityManager()->getConnection();
              
           $stmt = $conn->executeQuery(
                'SELECT e.id AS entrega_id,
                        e.fe_entrega,
                        e.peso_puro_entrega,
                        p.nb_proveedor
                 FROM entregas AS e
                 JOIN proveedores AS p ON (p.id = e.proveedor_id)
                 WHERE e.proveedor_id = :idProveedor
                 AND e.fe_entrega 
                 BETWEEN :feDesde 
                 AND :feHasta',
                   array('idProveedor' => $idProveedor,
                         'feDesde' => $feDesde,
                         'feHasta' => $feHasta));
            
            
            return $stmt->fetchAll();
    }
    
    public function findCierresPorProveedor($idProveedor) {
             $conn = $this->getEntityManager()->getConnection();
              
           $stmt = $conn->executeQuery(
                'SELECT *
                 FROM v_cierres_por_proveedores AS cp
                 WHERE cp.id_proveedor = :idProveedor',
                array('idProveedor' => $idProveedor)    
                 );
            
            
            return $stmt->fetchAll();
    }  
    
    
    public function getCierresFormatoBalanceMaterialProveedor($proveedorId) {
      $conn = $this->getEntityManager()->getConnection();
      
      $variables['proveedorId'] = $proveedorId; 


        
      $query = 'CALL REPORTE_BALANCE_MATERIAL_POR_PROVEEDOR(:proveedorId);';

      $stmt = $conn->executeQuery($query, $variables);
            
            
      return $stmt->fetchAll();
    }
}